{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onSetCheckedTodo","checkedTodo","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","inputState","setInputState","setToggleFilter","onSubmit","e","preventDefault","onChange","value","getToggleValue","target","placeholder","event","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","onClose","useState","isLoadedUser","setIsLoadedUser","user","setUser","fetchUser","useCallback","a","data","useEffect","userId","href","email","name","App","setTodos","isLoadedTodos","setIsLoadedTodos","setCheckedTodo","toggleFilter","filteredTodos","fetchData","length","normInputState","toLocaleLowerCase","trim","filter","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.67f5e7c9.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[]\n  onSetCheckedTodo: (todo: Todo) => void\n  checkedTodo: Todo | null\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSetCheckedTodo,\n  checkedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          key={todo.id}\n          className={classNames(\n            { 'has-background-info-light': checkedTodo?.id === todo.id },\n          )}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p className={\n              todo.completed ? 'has-text-success' : 'has-text-danger'\n            }\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => onSetCheckedTodo(todo)}\n            >\n              <span className=\"icon\">\n                <i className={classNames(\n                  'far',\n                  {\n                    'fa-eye': todo !== checkedTodo,\n                    'fa-eye-slash': todo === checkedTodo,\n                  },\n                )}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n\n      {/* <tr data-cy=\"todo\" className=\"\">\n        <td className=\"is-vcentered\">1</td>\n        <td className=\"is-vcentered\" />\n        <td className=\"is-vcentered is-expanded\">\n          <p className=\"has-text-danger\">delectus aut autem</p>\n        </td>\n        <td className=\"has-text-right is-vcentered\">\n          <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n            <span className=\"icon\">\n              <i className=\"far fa-eye\" />\n            </span>\n          </button>\n        </td>\n      </tr>\n      <tr data-cy=\"todo\" className=\"has-background-info-light\">\n        <td className=\"is-vcentered\">2</td>\n        <td className=\"is-vcentered\" />\n        <td className=\"is-vcentered is-expanded\">\n          <p className=\"has-text-danger\">quis ut nam facilis et officia qui</p>\n        </td>\n        <td className=\"has-text-right is-vcentered\">\n          <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n            <span className=\"icon\">\n              <i className=\"far fa-eye-slash\" />\n            </span>\n          </button>\n        </td>\n      </tr>\n\n      <tr data-cy=\"todo\" className=\"\">\n        <td className=\"is-vcentered\">1</td>\n        <td className=\"is-vcentered\" />\n        <td className=\"is-vcentered is-expanded\">\n          <p className=\"has-text-danger\">delectus aut autem</p>\n        </td>\n        <td className=\"has-text-right is-vcentered\">\n          <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n            <span className=\"icon\">\n              <i className=\"far fa-eye\" />\n            </span>\n          </button>\n        </td>\n      </tr>\n\n      <tr data-cy=\"todo\" className=\"\">\n        <td className=\"is-vcentered\">6</td>\n        <td className=\"is-vcentered\" />\n        <td className=\"is-vcentered is-expanded\">\n          <p className=\"has-text-danger\">\n            qui ullam ratione quibusdam voluptatem quia omnis\n          </p>\n        </td>\n        <td className=\"has-text-right is-vcentered\">\n          <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n            <span className=\"icon\">\n              <i className=\"far fa-eye\" />\n            </span>\n          </button>\n        </td>\n      </tr>\n\n      <tr data-cy=\"todo\" className=\"\">\n        <td className=\"is-vcentered\">8</td>\n        <td className=\"is-vcentered\">\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </td>\n        <td className=\"is-vcentered is-expanded\">\n          <p className=\"has-text-success\">quo adipisci enim quam ut ab</p>\n        </td>\n        <td className=\"has-text-right is-vcentered\">\n          <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n            <span className=\"icon\">\n              <i className=\"far fa-eye\" />\n            </span>\n          </button>\n        </td>\n      </tr> */}\n    </tbody>\n  </table>\n);\n","import React from 'react';\n\ntype Props = {\n  inputState: string\n  setInputState: (inputState: string) => void\n  setToggleFilter: (toggleFilter: boolean | null) => void\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  inputState,\n  setInputState,\n  setToggleFilter,\n}) => {\n  const getToggleValue = (value: string) => {\n    switch (value) {\n      case 'active':\n        setToggleFilter(false);\n        break;\n\n      case 'completed':\n        setToggleFilter(true);\n        break;\n\n      default:\n        setToggleFilter(null);\n        break;\n    }\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={e => e.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={e => getToggleValue(e.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={inputState}\n          onChange={event => setInputState(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {inputState && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setInputState('')}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, {\n  ReactEventHandler, useCallback, useEffect, useState,\n} from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  checkedTodo: Todo\n  onClose: ReactEventHandler\n};\n\nexport const TodoModal: React.FC<Props> = ({ checkedTodo, onClose }) => {\n  const [isLoadedUser, setIsLoadedUser] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  const fetchUser = useCallback(async (id: number) => {\n    const data = await getUser(id);\n\n    setUser(data);\n    setIsLoadedUser(true);\n  }, []);\n\n  useEffect(() => {\n    fetchUser(checkedTodo.userId);\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!isLoadedUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${checkedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {checkedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {checkedTodo.completed\n                ? (<strong className=\"has-text-success\">Done</strong>)\n                : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoadedTodos, setIsLoadedTodos] = useState(false);\n  const [checkedTodo, setCheckedTodo] = useState<Todo | null>(null);\n  const [inputState, setInputState] = useState('');\n  const [toggleFilter, setToggleFilter] = useState<boolean | null>(null);\n\n  let filteredTodos = [...todos];\n\n  const fetchData = useCallback(async () => {\n    const data = await getTodos();\n\n    setTodos(data);\n    setIsLoadedTodos(true);\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  if (inputState && inputState.length > 0) {\n    const normInputState = inputState.toLocaleLowerCase().trim();\n\n    filteredTodos = filteredTodos.filter(todo => todo.title.toLocaleLowerCase()\n      .includes(normInputState));\n  }\n\n  if (toggleFilter !== null) {\n    filteredTodos = filteredTodos.filter(todo => todo.completed === toggleFilter);\n  }\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                inputState={inputState}\n                setInputState={setInputState}\n                setToggleFilter={setToggleFilter}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!isLoadedTodos\n                ? (<Loader />)\n                : (\n                  <TodoList\n                    todos={filteredTodos}\n                    onSetCheckedTodo={setCheckedTodo}\n                    checkedTodo={checkedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {checkedTodo && (\n        <TodoModal\n          checkedTodo={checkedTodo}\n          onClose={() => setCheckedTodo(null)}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}